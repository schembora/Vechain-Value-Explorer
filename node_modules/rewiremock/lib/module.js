'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inParents = exports.getModuleParents = exports.getModuleParent = exports.getModuleName = exports.moduleCompare = exports.pickModuleName = exports.originalLoader = undefined;

var _path = require('path');

var _getModule = require('./getModule');

var _getModule2 = _interopRequireDefault(_getModule);

var _executor = require('./executor');

var _executor2 = _interopRequireDefault(_executor);

var _asyncModules = require('./asyncModules');

var _asyncModules2 = _interopRequireDefault(_asyncModules);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const originalLoader = exports.originalLoader = _getModule2.default._load;

const NodeModule = {
  overloadRequire() {
    _getModule2.default._load = _executor2.default;
    // overload modules by internally
  },

  restoreRequire() {
    _getModule2.default._load = originalLoader;
  },

  probeAsyncModules() {
    const load = _getModule2.default._load;
    _getModule2.default._load = _asyncModules2.default.load(this);
    return _asyncModules2.default.execute().then(() => {
      _getModule2.default._load = load;
    });
  },

  _resolveFilename(fileName, module) {
    return _getModule2.default._resolveFilename(fileName, module);
  },

  get _cache() {
    return _getModule2.default._cache;
  },

  relativeFileName(name, parent) {
    if (name[0] == '.') {
      return this._resolveFilename(name, parent);
    }
    return name;
  },

  require(name, parentModule) {
    return (0, _executor.requireModule)(name, parentModule);
  }
};

const toModule = name => name && require.cache[name];

const pickModuleName = exports.pickModuleName = (fileName, parent) => {
  if (typeof __webpack_modules__ !== 'undefined' && !__webpack_modules__[fileName]) {
    const targetFile = (0, _path.resolve)((0, _path.dirname)(getModuleName(parent)), fileName);
    return Object.keys(__webpack_modules__).find(name => name.indexOf(targetFile) > 0);
  } else {
    return fileName;
  }
};

const moduleCompare = exports.moduleCompare = (a, b) => a === b || getModuleName(a) === getModuleName(b);

const getModuleName = exports.getModuleName = module => module.filename || module.i;
const getModuleParent = exports.getModuleParent = module => module && (module.parent || toModule(module.parents && module.parents[0]));
const getModuleParents = exports.getModuleParents = module => module && (module.parent ? [getModuleName(module.parent)] : module.parents);

const inParents = exports.inParents = (a, b) => {
  const B = getModuleName(b);
  const parents = getModuleParents(a);
  return !!parents.find(x => x === B);
};

exports.default = NodeModule;