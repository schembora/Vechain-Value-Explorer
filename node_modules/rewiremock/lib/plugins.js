'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._clearPlugins = exports.removePlugin = exports.addPlugin = exports.onEnable = exports.onDisable = exports.onMockCreate = exports.autoMock = exports.shouldMock = exports.shouldWipe = exports.convertName = undefined;

var _globals = require('./globals');

var _globals2 = _interopRequireDefault(_globals);

var _common = require('./plugins/_common');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const plugins = () => {
  const result = [];
  const collect = scope => {
    result.push(...scope.plugins);
    if (scope.parentScope) {
      collect(scope.parentScope);
    }
  };
  collect((0, _globals2.default)());
  return result;
};

const convertName = (fileName, parentModule) => {
  const resultName = plugins().reduce((name, plugin) => {
    if (plugin.fileNameTransformer) {
      return plugin.fileNameTransformer(name, parentModule) || name;
    }
    return name;
  }, fileName);

  if (typeof __webpack_modules__ !== 'undefined') {
    if (resultName[0] !== '.') {
      return '.' + resultName;
    }
  }
  return resultName;
};

const triResult = (values, defaultValue, storeResult) => {
  if (storeResult) {
    storeResult.values = values;
    storeResult.plugins = plugins();
  }
  if (values.indexOf(_common.NO) >= 0) {
    return false;
  }
  if (values.indexOf(_common.YES) >= 0) {
    return true;
  }
  return defaultValue;
};

const shouldMock = (mock, request, parent, topModule, result) => mock.disabled ? false : triResult(plugins().map(plugin => plugin.shouldMock ? plugin.shouldMock(mock, request, parent, topModule) : _common.PASS), true, result);

const shouldWipe = (stubs, moduleName) => triResult(plugins().map(plugin => plugin.wipeCheck ? plugin.wipeCheck(stubs, moduleName) : _common.PASS), false);

const autoMock = moduleName => plugins().reduce((result, plugin) => result || plugin.autoMock && plugin.autoMock(moduleName), false);

const onMockCreate = mock => plugins().reduce((mock, plugin) => {
  if (plugin.onMockCreate) {
    return plugin.onMockCreate(mock) || mock;
  }
  return mock;
}, mock);

const onDisable = mocks => {
  const plugs = plugins();
  Object.keys(mocks).forEach(mockName => {
    const mock = mocks[mockName];
    plugs.forEach(plugin => plugin.onDisable && plugin.onDisable(mock._parent));
  });
};

const onEnable = mocks => {
  const plugs = plugins();
  Object.keys(mocks).forEach(mockName => {
    const mock = mocks[mockName];
    plugs.forEach(plugin => plugin.onEnable && plugin.onEnable(mock._parent));
  });
};

const addPlugin = plugin => {
  (0, _globals2.default)().plugins.push(plugin);
};

const removePlugin = plugin => {
  (0, _globals2.default)().plugins = (0, _globals2.default)().plugins.filter(plug => plug !== plugin);
};

const _clearPlugins = () => {
  (0, _globals2.default)().plugins = [];
};

exports.convertName = convertName;
exports.shouldWipe = shouldWipe;
exports.shouldMock = shouldMock;
exports.autoMock = autoMock;
exports.onMockCreate = onMockCreate;
exports.onDisable = onDisable;
exports.onEnable = onEnable;
exports.addPlugin = addPlugin;
exports.removePlugin = removePlugin;
exports._clearPlugins = _clearPlugins;