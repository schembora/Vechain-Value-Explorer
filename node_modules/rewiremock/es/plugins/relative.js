import createPlugin, { YES, PASS, NO } from './_common';
import { inParents } from '../module';
import { extensions } from "../_common";

var trimKey = function trimKey(key) {
  return key[0] == '.' ? trimKey(key.substr(1)) : key;
};

export var relativeWipeCheck = function relativeWipeCheck(stubs, moduleName) {
  if (Object.keys(stubs).find(function (key) {
    return extensions.find(function (ext) {
      return moduleName.endsWith(trimKey(key + ext));
    });
  })) {
    return YES;
  }
};

var fileNameTransformer = function fileNameTransformer(fileName /*, module*/) {
  return fileName;
};
//const wipeCheck = (stubs, moduleName) => relativeWipeCheck(stubs, moduleName);

var shouldMock = function shouldMock(mock, request, parent, topModule) {
  return inParents(parent, topModule) ? PASS : NO;
};

var plugin = createPlugin({
  fileNameTransformer: fileNameTransformer,
  //wipeCheck,
  shouldMock: shouldMock,

  name: 'relative'
});

export default plugin;