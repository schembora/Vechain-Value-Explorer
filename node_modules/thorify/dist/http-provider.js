"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:max-line-length */
// forked from ethjs-provider-http
// workaround to use http provider in different envs
const XHR2 = require("xhr2");
const web3Utils = require("web3-utils");
const debug = require("debug")("thor:http-provider");
const thor_interceptor_1 = require("./thor-interceptor");
class ThorHttpProvider {
    constructor(host, timeout = 0) {
        if (!host) {
            throw new Error('[thorify-provider-http] the ThorHttpProvider instance requires that the host be specified (e.g. `new HttpProvider("http://localhost:8545")` or via service like infura `new HttpProvider("http://ropsten.infura.io")`)');
        }
        this.host = host;
        this.timeout = timeout;
    }
    sendAsync(payload, callback) {
        debug("payload: %O", payload);
        if (payload.method === "eth_sendTransaction") {
            return callback(new Error("The private key corresponding to from filed can't be found in local eth.accounts.wallet!"), {
                id: payload.id || 0,
                jsonrpc: payload.jsonrpc || "2.0",
                result: null,
            });
        }
        if (!thor_interceptor_1.ThorAPIMapping[payload.method]) {
            return callback(new Error("Method not supported!"), {
                id: payload.id || 0,
                jsonrpc: payload.jsonrpc || "2.0",
                result: null,
            });
        }
        const Interceptor = thor_interceptor_1.ThorAPIMapping[payload.method];
        const preparation = Interceptor.prepare(payload);
        const request = new XHR2();
        request.timeout = this.timeout;
        request.open(preparation.Method, this.host + preparation.URL, true);
        request.onreadystatechange = () => {
            if (request.readyState === 4) {
                if (request.status !== 200) {
                    return callback(new Error("[thorify-provider-http] Invalid response code from provider: " + request.status + (request.responseText ? ", response: " + request.responseText : "")), {
                        id: payload.id || 0,
                        jsonrpc: payload.jsonrpc || "2.0",
                        result: null,
                    });
                }
                let result = request.responseText;
                let error = null;
                try {
                    result = JSON.parse(result);
                }
                catch (e) {
                    error = invalidResponseError(e);
                    return callback(error, {
                        id: payload.id || 0,
                        jsonrpc: payload.jsonrpc || "2.0",
                        result: null,
                    });
                }
                debug("result: %O", result);
                result = preparation.ResFormatter(result);
                // tricks for compatible with original web3 instance
                // non-objects or non-arrays does't need isThorified property since thorify just overwritten 3 formatters
                // which all accept object as input
                if (web3Utils._.isObject(result) && !web3Utils._.isArray(result)) {
                    Object.defineProperty(result, "isThorified", { get: () => true });
                }
                if (web3Utils._.isArray(result)) {
                    result = result.map((item) => {
                        Object.defineProperty(item, "isThorified", { get: () => true });
                        return item;
                    });
                }
                callback(error, {
                    id: payload.id || 0,
                    jsonrpc: payload.jsonrpc || "2.0",
                    result,
                });
            }
        };
        request.ontimeout = () => {
            callback(new Error(`[thorify-provider-http] CONNECTION TIMEOUT: http request timeout after ${this.timeout} ms. (i.e. your connect has timed out for whatever reason, check your provider).`), null);
        };
        try {
            request.send(preparation.Method === "POST" ? JSON.stringify(preparation.Body) : null);
        }
        catch (error) {
            callback(new Error(`[thorify-provider-http] CONNECTION ERROR: Couldn't connect to node '${this.host}': ${JSON.stringify(error, null, 2)}`), null);
        }
    }
}
exports.ThorHttpProvider = ThorHttpProvider;
/**
 * InvalidResponseError helper for invalid errors.
 */
function invalidResponseError(error) {
    const message = `[thorify-provider-http] Invalid response from host provider :${error.message}`;
    return new Error(message);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9odHRwLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7QUFDYixvQ0FBb0M7QUFDcEMsa0NBQWtDO0FBRWxDLG9EQUFvRDtBQUNwRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0IsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3hDLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3JELHlEQUFtRDtBQUVuRDtJQUlFLFlBQVksSUFBWSxFQUFFLE9BQU8sR0FBRyxDQUFDO1FBQ25DLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHdOQUF3TixDQUFDLENBQUM7U0FBRTtRQUV6UCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0lBRU0sU0FBUyxDQUFDLE9BQVksRUFBRSxRQUFhO1FBQzFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFOUIsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLHFCQUFxQixFQUFFO1lBQzVDLE9BQU8sUUFBUSxDQUFDLElBQUksS0FBSyxDQUFDLDBGQUEwRixDQUFDLEVBQUU7Z0JBQ3JILEVBQUUsRUFBRSxPQUFPLENBQUMsRUFBRSxJQUFJLENBQUM7Z0JBQ25CLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxJQUFJLEtBQUs7Z0JBQ2pDLE1BQU0sRUFBRSxJQUFJO2FBQ2IsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxJQUFJLENBQUMsaUNBQWMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDbkMsT0FBTyxRQUFRLENBQUMs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