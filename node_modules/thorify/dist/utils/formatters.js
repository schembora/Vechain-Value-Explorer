"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:max-line-length */
const web3Utils = require("web3-utils");
const thor_model_kit_1 = require("thor-model-kit");
const utils = require("./");
exports.isArray = function (o) {
    return Object.prototype.toString.call(o) === "[object Array]";
};
exports.formatBlockNumber = function (blockNumber) {
    if (typeof blockNumber === "number") {
        return blockNumber;
    }
    else if (typeof blockNumber === "string") {
        if (blockNumber === "earliest") {
            return 0;
        }
        else if (blockNumber === "latest" || blockNumber === "pending") {
            return "best";
        }
        else {
            const num = utils.toInteger(blockNumber);
            return num || num === 0 ? num : "best";
        }
    }
    else {
        return "best";
    }
};
exports.formatBlockHash = function (blockHash) {
    if (utils.isHex(blockHash)) {
        return blockHash;
    }
    else {
        return "best";
    }
};
exports.formatRange = function (range) {
    const ret = {};
    if (range.unit !== "block" && range.unit !== "time") {
        return null;
    }
    else {
        ret.unit = range.unit;
    }
    if (range.hasOwnProperty("from")) {
        const temp = exports.formatBlockNumber(range.from);
        if (temp !== "best") {
            ret.from = temp;
        }
        else {
            ret.from = 0;
        }
    }
    else {
        ret.from = 0;
    }
    if (range.hasOwnProperty("to")) {
        const temp = utils.formatBlockNumber(range.to);
        if (temp !== "best") {
            ret.to = temp;
        }
        else {
            ret.to = Number.MAX_SAFE_INTEGER;
        }
    }
    else {
        ret.to = Number.MAX_SAFE_INTEGER;
    }
    return ret;
};
exports.formatOptions = function (options) {
    const ret = {};
    if (options.hasOwnProperty("limit")) {
        const temp = utils.toInteger(options.limit);
        if (temp) {
            ret.limit = temp;
        }
    }
    if (options.hasOwnProperty("offset")) {
        const temp = utils.toInteger(options.offset);
        if (temp) {
            ret.offset = temp;
        }
    }
    if (ret.hasOwnProperty("limit") || ret.hasOwnProperty("offset")) {
        return ret;
    }
    else {
        return null;
    }
};
exports.formatLogQuery = function (params) {
    const body = {
        topicSets: [],
    };
    if (params.range) {
        const ret = exports.formatRange(params.range);
        if (ret) {
            body.range = ret;
        }
    }
    if (params.options) {
        const ret = exports.formatOptions(params.options);
        if (ret) {
            body.options = ret;
        }
    }
    if (!body.range) {
        if (params.hasOwnProperty("fromBlock")) {
            const from = exports.formatBlockNumber(params.fromBlock);
            if (from !== "best") {
                body.range = {};
                body.range.from = Number.parseInt(from);
            }
        }
        if (params.hasOwnProperty("toBlock")) {
            const to = exports.formatBlockNumber(params.toBlock);
            if (to !== "best") {
                body.range = body.range ? body.range : {};
                body.range.to = Number.parseInt(to);
            }
        }
        if (body.range) {
            body.range.unit = "block";
        }
    }
    body.topicSets = [];
    const topics = [];
    if (params.topics && params.topics.length) {
        for (let i = 0; i < params.topics.length; i++) {
            if (typeof params.topics[i] === "string") {
                topics.push({
                    name: "topic" + i,
                    array: [params.topics[i]],
                });
            }
            else if (exports.isArray(params.topics[i]) && params.topics[i].length) {
                topics.push({
                    name: "topic" + i,
                    array: params.topics[i],
                });
            }
        }
    }
    const outputTopic = function (topics, index, receiver, current) {
        if (index === topics.length) {
            const o = {};
            Object.assign(o, current);
            receiver.push(o);
            return;
        }
        for (const item of topics[index].array) {
            current[topics[index].name] = item;
            outputTopic(topics, index + 1, receiver, current);
        }
    };
    if (topics.length) {
        outputTopic(topics, 0, body.topicSets, {});
    }
    return body;
};
exports.mustToBN = function (value) {
    if (web3Utils._.isNull(value) || web3Utils._.isUndefined(value)) {
        throw new Error("input can't be null or undefined");
    }
    const num = web3Utils.toBN(value);
    return num.abs();
};
exports.validNumberOrDefault = function (value, defaultValue) {
    if (typeof value === "number" && Number.isInteger(value)) {
        return Math.abs(value);
    }
    if (Number.isNaN(Number.parseInt(value)) === false) {
        return Math.abs(Number.parseInt(value));
    }
    return defaultValue;
};
exports.leftPadBuffer = function (buf, length) {
    if (buf.length > length) {
        return buf;
    }
    return Buffer.concat([Buffer.alloc(length - buf.length), buf]);
};
exports.ethToThorTx = function (ethTx) {
    const thorTx = {
        clauses: [],
    };
    thorTx.chainTag = exports.validNumberOrDefault(ethTx.chainTag, 0);
    thorTx.blockRef = exports.leftPadBuffer(exports.mustToBN(ethTx.blockRef).toBuffer(), 8);
    thorTx.gas = utils.toPrefixedHex(exports.mustToBN(ethTx.gas).toString(16));
    thorTx.expiration = exports.validNumberOrDefault(ethTx.expiration, utils.params.defaultExpiration);
    thorTx.gasPriceCoef = exports.validNumberOrDefault(ethTx.gasPriceCoef, utils.params.defaultGasPriceCoef);
    thorTx.dependsOn = !ethTx.dependsOn ? null : exports.mustToBN(ethTx.dependsOn).toBuffer();
    thorTx.nonce = utils.toPrefixedHex(exports.mustToBN(ethTx.nonce).toString(16));
    const clause = {
        value: ethTx.value || "0",
        to: null,
    };
    if (ethTx.to) {
        clause.to = ethTx.to;
    }
    if (ethTx.data) {
        if (!utils.isHex(ethTx.data)) {
            throw new Error("The data field must be HEX encoded data.");
        }
        else {
            clause.data = Buffer.from(utils.sanitizeHex(ethTx.data), "hex");
        }
    }
    else {
        clause.data = Buffer.alloc(0);
    }
    if (ethTx.value) {
        clause.value = ethTx.value;
    }
    if (ethTx.data || ethTx.to) {
        thorTx.clauses.push(clause);
    }
    const body = {
        chainTag: thorTx.chainTag,
        blockRef: thorTx.blockRef,
        expiration: thorTx.expiration,
        gasPriceCoef: thorTx.gasPriceCoef,
        gas: thor_model_kit_1.BigInt.from(thorTx.gas),
        clauses: [],
        dependsOn: thorTx.dependsOn ? new thor_model_kit_1.Bytes32(thorTx.dependsOn) : null,
        nonce: thor_model_kit_1.BigInt.from(thorTx.nonce),
        reserved: [],
    };
    if (thorTx.clauses.length) {
        body.clauses.push({
            to: thorTx.clauses[0].to ? thor_model_kit_1.Address.fromHex(thorTx.clauses[0].to) : null,
            value: thor_model_kit_1.BigInt.from(thorTx.clauses[0].value),
            data: thorTx.clauses[0].data,
        });
    }
    return new thor_model_kit_1.Transaction(body);
};
//# sourceMappingURL=data:application/json;base64,