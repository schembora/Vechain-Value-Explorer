/// <reference types="node" />
import BigNumber from 'bignumber.js';
/**
 * Address class.
 */
export declare class Address {
    /**
     * parses hex string to Address.
     * @param hex the hex string
     * @param prefix prefix to match against, defaults to '0x'
     */
    static fromHex(hex: string, prefix?: string): Address;
    /** the underlying value */
    readonly bytes: Buffer;
    /**
     * construct Address object from Buffer.
     * @param bytes
     */
    constructor(bytes: Buffer);
    /**
     * convert to string presentation, in hex form.
     * @param prefix prefix added before string, defaults to '0x'
     */
    toString(prefix?: string): string;
}
/**
 * Bytes32 class.
 */
export declare class Bytes32 {
    /**
     * parses hex string to Bytes32.
     * @param hex the hex string
     * @param prefix prefix to match against, defaults to '0x'
     */
    static fromHex(hex: string, prefix?: string): Bytes32;
    /** the underlying value */
    readonly bytes: Buffer;
    /**
     * construct Bytes32 object from Buffer.
     * @param bytes
     */
    constructor(bytes: Buffer);
    /**
    * convert to string presentation, in hex form.
    * @param prefix prefix added before string, defaults to '0x'
    */
    toString(prefix?: string): string;
}
/**
 * BigInt class presents non-negative big integer
 */
export declare class BigInt {
    /**
     * parse a value to BigInt.
     * @param v can be a integer in types of number, string and BigNumber
     */
    static from(v: number | string | BigNumber): BigInt;
    /** the underlying value */
    readonly bytes: Buffer;
    /**
     * construct BigInt object from Buffer.
     * @param bytes
     */
    constructor(bytes: Buffer);
    /**
     * convert to BigNumber
     */
    toBigNumber(): BigNumber;
    /**
     * convert to string
     * @param base the base, 16 or 10, defaults to 16
     */
    toString(base?: 16 | 10): string;
}
