/// <reference types="node" />
import { Address, BigInt, Bytes32 } from './types';
/**
 * Transaction class defines VeChainThor's multi-clause transaction.
 */
export declare class Transaction {
    /** body of transaction */
    readonly body: Transaction.Body;
    /** signature to transaction */
    signature?: Buffer;
    /**
     * construct a transaction object with given body
     * @param body
     */
    constructor(body: Transaction.Body);
    /** returns hash for signing */
    readonly signingHash: Bytes32;
    /**
     * returns transaction ID
     * empty ID returned if something wrong (e.g. invalid signature)
     */
    readonly id: Bytes32;
    /** returns signer */
    readonly signer: Address;
    /** returns intrinsic gas it takes */
    readonly intrinsicGas: number;
    /**
     * returns absolute gas price according to base gas price
     * @param baseGasPrice
     */
    gasPrice(baseGasPrice: BigInt): BigInt;
    /** encode into Buffer */
    encode(): Buffer;
    /** decode from Buffer to transaction */
    static decode(raw: Buffer): Transaction;
    private readonly rlpList;
}
export declare namespace Transaction {
    /** clause type */
    type Clause = {
        /**
         * destination address where transfer token to, or invoke contract method on.
         * set null destination to deploy a contract.
         */
        to: Address | null;
        /** amount of token to transfer to the destination */
        value: BigInt;
        /** input data for contract method invocation or deployment */
        data: Buffer;
    };
    /** body type */
    type Body = {
        /** last byte of genesis block ID */
        chainTag: number;
        /** 8 bytes prefix of some block's ID */
        blockRef: Buffer;
        /** constraint of time bucket */
        expiration: number;
        /** array of clauses */
        clauses: Clause[];
        /** coef applied to base gas price [0,255] */
        gasPriceCoef: number;
        /** max gas provided for execution */
        gas: BigInt;
        /** ID of another tx that is depended */
        dependsOn: Bytes32 | null;
        /** nonce value for various purposes */
        nonce: BigInt;
        /** reserved fields, must be empty */
        reserved: any[];
    };
}
