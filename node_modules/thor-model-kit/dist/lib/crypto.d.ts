/// <reference types="node" />
import { Bytes32, Address } from './types';
/**
 * computes blake2b 256bit hash of given data
 * @param data one or more Buffer | string
 */
export declare function blake2b256(...data: (Buffer | string)[]): Bytes32;
/**
 * computes keccak256 hash of given data
 * @param data one or more Buffer | string
 */
export declare function keccak256(...data: (Buffer | string)[]): Bytes32;
/** Secp256k1 methods set */
export declare namespace Secp256k1 {
    /** generate private key  */
    function generatePrivateKey(): Bytes32;
    /**
     * derive public key(uncompressed) from private key
     * @param privKey the private key
     */
    function derivePublicKey(privKey: Bytes32): Buffer;
    /**
     * derive Address from public key
     * @param pubKey the public key
     */
    function deriveAddress(pubKey: Buffer): Address;
    /**
     * sign a message using elliptic curve algorithm on the curve secp256k1
     * @param msgHash hash of message
     * @param privKey serialized private key
     */
    function sign(msgHash: Bytes32, privKey: Bytes32): Buffer;
    /**
     * recovery signature to public key
     * @param msgHash hash of message
     * @param sig signature
     */
    function recover(msgHash: Bytes32, sig: Buffer): Buffer;
}
