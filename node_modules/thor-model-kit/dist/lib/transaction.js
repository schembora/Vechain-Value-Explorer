"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("./types");
const crypto_1 = require("./crypto");
const rlp = require('rlp');
/**
 * Transaction class defines VeChainThor's multi-clause transaction.
 */
class Transaction {
    /**
     * construct a transaction object with given body
     * @param body
     */
    constructor(body) {
        validateBody(body);
        this.body = body;
    }
    /** returns hash for signing */
    get signingHash() {
        let data = rlp.encode(this.rlpList);
        return crypto_1.blake2b256(data);
    }
    /**
     * returns transaction ID
     * empty ID returned if something wrong (e.g. invalid signature)
     */
    get id() {
        try {
            return crypto_1.blake2b256(this.signingHash.bytes, this.signer.bytes);
        }
        catch (_a) {
            return new types_1.Bytes32(Buffer.alloc(0));
        }
    }
    /** returns signer */
    get signer() {
        if (!this.signature)
            throw new Error('signature missing');
        let pubKey = crypto_1.Secp256k1.recover(this.signingHash, this.signature);
        return crypto_1.Secp256k1.deriveAddress(pubKey);
    }
    /** returns intrinsic gas it takes */
    get intrinsicGas() {
        const txGas = 5000;
        const clauseGas = 16000;
        const clauseGasContractCreation = 48000;
        if (this.body.clauses.length === 0)
            return txGas + clauseGas;
        return this.body.clauses.reduce((sum, c) => {
            if (c.to)
                sum += clauseGas;
            else
                sum += clauseGasContractCreation;
            sum += dataGas(c.data);
            return sum;
        }, txGas);
    }
    /**
     * returns absolute gas price according to base gas price
     * @param baseGasPrice
     */
    gasPrice(baseGasPrice) {
        let bgp = baseGasPrice.toBigNumber();
        let extra = bgp
            .multipliedBy(this.body.gasPriceCoef)
            .dividedToIntegerBy(0xff);
        return types_1.BigInt.from(bgp.plus(extra));
    }
    /** encode into Buffer */
    encode() {
        let list = this.rlpList;
        if (this.signature)
            list.push(this.signature);
        return rlp.encode(list);
    }
    /** decode from Buffer to transaction */
    static decode(raw) {
        let list = decodeList(rlp.decode(raw), 10);
        let tx = new Transaction({
            chainTag: decodeNumber(list[0]),
            blockRef: decodeBlockRef(list[1]),
            expiration: decodeNumber(list[2]),
            clauses: decodeClauses(list[3]),
            gasPriceCoef: decodeNumber(list[4]),
            gas: decodeBigInt(list[5]),
            dependsOn: decodeBytes32OrNull(list[6]),
            nonce: decodeBigInt(list[7]),
            reserved: decodeList(list[8])
        });
        tx.signature = decodeBuffer(list[9]);
        return tx;
    }
    get rlpList() {
        let body = this.body;
        return [
            body.chainTag,
            new types_1.BigInt(body.blockRef).bytes,
            body.expiration,
            body.clauses.map(clause => [
                clause.to ? clause.to.bytes : '',
                clause.value.bytes,
                clause.data,
            ]),
            body.gasPriceCoef,
            body.gas.bytes,
            body.dependsOn ? body.dependsOn.bytes : '',
            body.nonce.bytes,
            body.reserved,
        ];
    }
}
exports.Transaction = Transaction;
function decodeClauses(data) {
    return decodeList(data).map(v => {
        let clauseData = decodeList(v, 3);
        return {
            to: decodeAddressOrNull(clauseData[0]),
            value: new types_1.BigInt(decodeBuffer(clauseData[1])),
            data: decodeBuffer(clauseData[2])
        };
    });
}
function validateBody(body) {
    mustUintN(body.chainTag, 8, 'chainTag: must be uint8');
    mustUintN(body.expiration, 32, 'expiration: must be uint32');
    mustUintN(body.gasPriceCoef, 8, 'gasPriceCoef: must be uint8');
    mustUintN(body.gas, 64, 'gas: must be uint64');
    mustUintN(body.nonce, 64, 'nonce: must be uint64');
    if (body.blockRef.length != 8)
        throw new Error('blockRef: must be 8 bytes');
}
function mustUintN(num, bits, msg) {
    if (typeof num === 'number') {
        if (!Number.isInteger(num) || num < 0 || num >= Math.pow(2, bits))
            throw new Error(msg);
    }
    else {
        if (num.bytes.length * 8 > bits)
            throw new Error(msg);
    }
}
function decodeBigInt(data) {
    let buf = decodeBuffer(data);
    let bi = new types_1.BigInt(buf);
    if (bi.bytes.length != buf.length)
        throw new Error('non-canonical integer (leading zero bytes) for integer');
    return bi;
}
function decodeNumber(data) {
    let bi = decodeBigInt(data);
    if (bi.bytes.length * 8 > 53)
        throw new Error('unable to safely decode to number');
    return bi.toBigNumber().toNumber();
}
function decodeBuffer(data) {
    if (!Buffer.isBuffer(data))
        throw new Error('buffer expected');
    return data;
}
function decodeBytes32OrNull(data) {
    let buf = decodeBuffer(data);
    if (buf.length == 0)
        return null;
    if (buf.length != 32)
        throw new Error('bytes32 expected');
    return new types_1.Bytes32(buf);
}
function decodeList(data, elemCount) {
    if (!Array.isArray(data))
        throw new Error('list expected');
    if (elemCount !== undefined) {
        if (data.length !== elemCount)
            throw new Error('list element count incorrect');
    }
    return data;
}
function decodeAddressOrNull(data) {
    let buf = decodeBuffer(data);
    if (buf.length == 0)
        return null;
    if (buf.length != 20)
        throw new Error('address expected');
    return new types_1.Address(buf);
}
function decodeBlockRef(data) {
    let bi = decodeBigInt(data);
    if (bi.bytes.length > 8)
        throw new Error('blockRef: too long');
    let buf = Buffer.alloc(8);
    bi.bytes.copy(buf, buf.length - bi.bytes.length);
    return buf;
}
function dataGas(data) {
    const zgas = 4;
    const nzgas = 68;
    return data.reduce((sum, cur) => {
        if (cur)
            return sum + nzgas;
        return sum + zgas;
    }, 0);
}
//# sourceMappingURL=data:application/json;base64,